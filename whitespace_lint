#!/usr/bin/env python3

__doc__ = """\
cleans up common whitespace messes or checks to make sure whitespace is clean.
try --help for more details.
"""

__version__ = "2.0"

import sys

def main(args, in_place, check, output, newline, end_with_newline, rstrip, tabs_to_spaces_cols):
    errors = []
    def check_for_changes(path, line_index, original_text, new_text, message, dont_repeate_tracker=None):
        if original_text != new_text:
            if not (dont_repeate_tracker != None and dont_repeate_tracker[0] == True):
                errors.append("ERROR: " + path + ":" + str(line_index+1) + ": " + message)
            if dont_repeate_tracker != None:
                dont_repeate_tracker[0] = True
        return new_text

    for arg in args:
        found_bad_newlines_tracker = [False]
        previous_errors_len = len(errors)

        if arg == "-":
            contents = sys.stdin.read()
        else:
            with open(arg) as f:
                contents = f.read()
        lines = split_into_lines(contents)

        for i, line in enumerate(lines):
            (line_without_terminator, line_terminator) = split_terminator(line)
            if line_terminator == "":
                # the last line doesn't end with a terminator
                if end_with_newline:
                    line_terminator = check_for_changes(arg, i, line_terminator, newline, "no newline at end of file")
            else:
                if newline != None:
                    line_terminator = check_for_changes(arg, i, line_terminator, newline, "incorrect line terminator", found_bad_newlines_tracker)
            if rstrip:
                line_without_terminator = check_for_changes(arg, i, line_without_terminator, line_without_terminator.rstrip(), "trailing whitespace at end of line")
            if tabs_to_spaces_cols != None:
                line_without_terminator = check_for_changes(arg, i, line_without_terminator, tabs_to_spaces(line_without_terminator, tabs_to_spaces_cols), "hard tabs")
            lines[i] = line_without_terminator + line_terminator
        contents = "".join(lines)

        if check:
            continue
        if in_place:
            if len(errors) == previous_errors_len:
                # nothing changed
                continue
            output = arg
        if output == "-":
            sys.stdout.write(contents)
        else:
            with open(output, "w") as f:
                f.write(contents)

    if check:
        if len(errors) > 0:
            sys.exit("\n".join(errors))

def split_into_lines(text):
    """includes line terminators"""
    lines = []
    index = 0
    while True:
        previous_index = index
        try:
            index = text.index("\n", index) + 1
        except ValueError:
            break
        lines.append(text[previous_index:index])
    if index < len(text):
        lines.append(text[index:])
    return lines

def split_terminator(line):
    split_index = len(line)
    try:
        split_index = line.rindex("\n")
        split_index = line.rindex("\r")
    except ValueError:
        pass
    return (line[:split_index], line[split_index:])

def tabs_to_spaces(line, cols):
    i = 0
    while i < len(line):
        c = line[i]
        if c == ' ':
            pass
        elif c == '\t':
            spaces_needed = cols - i % cols
            line = line[:i] + " " * spaces_needed + line[i+1:]
        else:
            break
        i += 1

    return line

newline_styles = {
    "unix": "\n",
    "dos": "\r\n",
}
def cli():
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--version", action="version", version=__version__)

    transformations = parser.add_argument_group("Transformations",
        "if no transformations are specified, the default is: "
        "--rstrip --end-with-newline --newline=unix --tabs-to-spaces=8")
    transformations.add_argument("-s", "--rstrip", action="store_true", help=
        "delete whitepsace from the ends of lines")
    transformations.add_argument("-e", "--end_with_newline", "--end-with-newline", action="store_true", help=
        "ensure non-empty files end with a newline. requires -n.")
    transformations.add_argument("-n", "--newline", metavar="STYLE", help=
        "convert line endings to " + repr(newline_styles))
    transformations.add_argument("-t", "--tabs_to_spaces", "--tabs-to-spaces", metavar="COLS", type=int, help=
        "replace usage of tabs with spaces respecting mixed space/tab indentation. "
        "see https://docs.python.org/2/reference/lexical_analysis.html#indentation")

    output_group = parser.add_mutually_exclusive_group()
    output_group.add_argument("-i", "--in_place", "--in-place", action="store_true", help=
        "output file is the source file")
    output_group.add_argument("-c", "--check", action="store_true", help=
        "if transformations cause any change in the input, raise an error")
    output_group.add_argument("-o", "--output", help=
        "write output to this file. Default is \"-\" (stdout) unless --in-place or --check is specified.")

    parser.add_argument("file", nargs="*", help=
        "If no files are specified, reads from \"-\" (stdin).")

    args = parser.parse_args()
    if not any([args.in_place, args.check, args.output != None]):
        args.output = "-"

    if args.end_with_newline and args.newline == None:
        parser.error("--end-with-newline requires --newline")
    if sum([args.newline != None, args.end_with_newline, args.rstrip, args.tabs_to_spaces != None]) == 0:
        args.rstrip = True
        args.end_with_newline = True
        args.newline = "unix"
        args.tabs_to_spaces = 8
    if args.newline not in newline_styles:
        parser.error("invalid newline style: " + repr(args.newline))

    if not args.file:
        args.file = ["-"]

    main(args.file,
        args.in_place, args.check, args.output,
        newline_styles[args.newline], args.end_with_newline, args.rstrip, args.tabs_to_spaces,
    )

if __name__ == "__main__":
    cli()
